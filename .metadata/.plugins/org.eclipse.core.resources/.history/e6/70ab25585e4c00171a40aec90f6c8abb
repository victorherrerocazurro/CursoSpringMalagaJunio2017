package com.viewnext.holamundo.javaconfig.configuration;

import java.util.Locale;

import org.springframework.context.MessageSource;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.i18n.CookieLocaleResolver;
import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

import com.viewnext.holamundomaven.servicios.BasicoServicio;
import com.viewnext.holamundomaven.servicios.Servicio;

@Configuration
@EnableWebMvc
@ComponentScan("com.viewnext.holamundo.javaconfig")
public class SpringConfiguration extends WebMvcConfigurerAdapter {
	
	@Override
	public void addInterceptors(InterceptorRegistry registry) {
		LocaleChangeInterceptor interceptor = new LocaleChangeInterceptor();
		
		interceptor.setParamName("idioma");
		
		registry.addInterceptor(interceptor);
	}

	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		//registry.addResourceHandler("/css/**").addResourceLocations("/WEB-INF/css/");
		registry.addResourceHandler("/css/**").addResourceLocations("/css/");
	}
	
	@Override
	public void addViewControllers(ViewControllerRegistry registry) {
		//No es posible ya que @ModelAttribute solo se resuelve con RequestMappingHandlerMapping
		//registry.addViewController("/Persona/Alta").setViewName("formularioAltaPersona");
		registry.addViewController("/").setViewName("index");
		//Permite configurar el orden de resolucion de los HandlerMapping
		//registry.setOrder(0);
	}

	@Bean
	public String contentTypeHtml() {
		return "text/html";
	}

	@Bean
	public String contentTypePlain() {
		return "text/plain";
	}

	@Bean
	public Servicio servicio() {
		return new BasicoServicio();
	}

	@Bean
	public ViewResolver internalResourceViewResolver() {
		InternalResourceViewResolver viewResolver = new InternalResourceViewResolver("/WEB-INF/views/", ".jsp");
		viewResolver.setOrder(1);
		return viewResolver;
	}
	
	@Bean
	public MessageSource messageSource(){
		ReloadableResourceBundleMessageSource result = new ReloadableResourceBundleMessageSource();
		result.addBasenames("classpath:mensajes");
		return result;
	}
	
	public CookieLocaleResolver cookieLocaleResolver(){
		CookieLocaleResolver cookieLocaleResolver = new CookieLocaleResolver();
		
		cookieLocaleResolver.setDefaultLocale(new Locale("es_ES"));
		cookieLocaleResolver.setCookieMaxAge(3600);
		cookieLocaleResolver.setCookieName("MyLocale");
		
		return cookieLocaleResolver;
	}

	/*
	 * @Bean
	 * 
	 * @Autowired public HolaMundoController controlador( Servicio servicio,
	 * CustomView customView){ HolaMundoController holaMundoController = new
	 * HolaMundoController();
	 * 
	 * holaMundoController.setCustomView(customView);
	 * holaMundoController.setServicio(servicio);
	 * 
	 * return holaMundoController; }
	 */
}
